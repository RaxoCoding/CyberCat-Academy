

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."add_solved_challenge"("p_user_id" "uuid", "p_challenge_id" bigint, "p_submitted_flag" "text") RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
DECLARE
    v_challenge_exists BOOLEAN;
    v_already_solved BOOLEAN;
    v_flag_correct BOOLEAN;
BEGIN
    -- Check if the challenge exists
    SELECT EXISTS(SELECT 1 FROM public.challenges WHERE id = p_challenge_id) INTO v_challenge_exists;
    IF NOT v_challenge_exists THEN
        RAISE EXCEPTION 'Challenge does not exist';
    END IF;

    -- Check if the user has already solved this challenge
    SELECT EXISTS(
        SELECT 1
        FROM public.users_link_challenges
        WHERE user_id = p_user_id AND challenge_id = p_challenge_id
    ) INTO v_already_solved;

    IF v_already_solved THEN
        RETURN FALSE; -- User has already solved this challenge
    END IF;

    -- Verify the flag
    v_flag_correct := public.verify_flag(p_challenge_id, p_submitted_flag) IS NOT NULL;

    IF v_flag_correct THEN
        -- Flag is correct, add the record to users_link_challenges
        INSERT INTO public.users_link_challenges (user_id, challenge_id)
        VALUES (p_user_id, p_challenge_id);
        RETURN TRUE;
    ELSE
        -- Flag is incorrect
        RETURN FALSE;
    END IF;
END; $$;


ALTER FUNCTION "public"."add_solved_challenge"("p_user_id" "uuid", "p_challenge_id" bigint, "p_submitted_flag" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."delete_user"() RETURNS "void"
    LANGUAGE "sql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
   delete from auth.users where id = auth.uid();
$$;


ALTER FUNCTION "public"."delete_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
DECLARE
    existing_username_count integer;
BEGIN
    -- Check for uniqueness of the specified username
    SELECT count(*) INTO existing_username_count 
    FROM public.users 
    WHERE lower(username) = lower(NEW.raw_user_meta_data->>'username') 
    AND id <> NEW.id;  -- Exclude the current user from the check

    IF existing_username_count > 0 THEN
        RAISE EXCEPTION 'Username "%s" is already taken. Please choose a different username.', NEW.raw_user_meta_data->>'username';
    END IF;

    -- If it's a new user, insert the new profile with the specified username
    IF TG_OP = 'INSERT' THEN
        INSERT INTO public.users (id, username) 
        VALUES (NEW.id, NEW.raw_user_meta_data->>'username');
    ELSIF TG_OP = 'UPDATE' THEN
        -- Update the username if it's an update operation
        UPDATE public.users 
        SET username = NEW.raw_user_meta_data->>'username' 
        WHERE id = NEW.id;
    END IF;

    RETURN NEW;
END; 
$$;


ALTER FUNCTION "public"."handle_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."verify_flag"("challenge_id" bigint, "submitted_flag" "text") RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN (
  SELECT c.id
  FROM public.challenges c
  WHERE c.id = challenge_id AND c.flag = submitted_flag
  LIMIT 1
  );
END;
$$;


ALTER FUNCTION "public"."verify_flag"("challenge_id" bigint, "submitted_flag" "text") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."categories" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "icon" "text",
    "description" "text" DEFAULT ''::"text",
    "name_id" "text" NOT NULL
);


ALTER TABLE "public"."categories" OWNER TO "postgres";


COMMENT ON TABLE "public"."categories" IS 'Challenge categories';



ALTER TABLE "public"."categories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."categories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."challenges" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "points" bigint NOT NULL,
    "category_id" bigint,
    "flag" "text" DEFAULT ''::"text" NOT NULL,
    "url" "text",
    "writeup" "text",
    "tags" "text"[],
    "ressources" "text"[],
    "author_id" "uuid",
    "files" "text"[],
    "name_id" "text"
);


ALTER TABLE "public"."challenges" OWNER TO "postgres";


COMMENT ON TABLE "public"."challenges" IS 'Challenges';



ALTER TABLE "public"."challenges" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."challenges_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE OR REPLACE VIEW "public"."public_challenges" AS
 SELECT "challenges"."id",
    "challenges"."name",
    "challenges"."name_id",
    "challenges"."description",
    "challenges"."created_at",
    "challenges"."points",
    "challenges"."category_id",
    "challenges"."url",
    "challenges"."writeup",
    "challenges"."ressources",
    "challenges"."files",
    "challenges"."tags",
    "challenges"."author_id"
   FROM "public"."challenges";


ALTER TABLE "public"."public_challenges" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "username" "text" DEFAULT ''::"text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);


ALTER TABLE "public"."users" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."users_link_challenges" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "challenge_id" bigint NOT NULL
);


ALTER TABLE "public"."users_link_challenges" OWNER TO "postgres";


COMMENT ON TABLE "public"."users_link_challenges" IS 'Link users and challenges tables';



CREATE OR REPLACE VIEW "public"."user_scores" AS
 SELECT "u"."id" AS "user_id",
    "u"."username",
    COALESCE("sum"("c"."points"), (0)::numeric) AS "total_score",
    "count"("ulc"."challenge_id") AS "challenges_solved"
   FROM (("public"."users" "u"
     LEFT JOIN "public"."users_link_challenges" "ulc" ON (("u"."id" = "ulc"."user_id")))
     LEFT JOIN "public"."challenges" "c" ON (("ulc"."challenge_id" = "c"."id")))
  GROUP BY "u"."id", "u"."username";


ALTER TABLE "public"."user_scores" OWNER TO "postgres";


ALTER TABLE "public"."users_link_challenges" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."users_link_challenges_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_name_id_key" UNIQUE ("name_id");



ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."challenges"
    ADD CONSTRAINT "challenges_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."challenges"
    ADD CONSTRAINT "challenges_name_id_key" UNIQUE ("name_id");



ALTER TABLE ONLY "public"."challenges"
    ADD CONSTRAINT "challenges_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."challenges"
    ADD CONSTRAINT "challenges_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users_link_challenges"
    ADD CONSTRAINT "users_link_challenges_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_username_key" UNIQUE ("username");



ALTER TABLE ONLY "public"."challenges"
    ADD CONSTRAINT "challenges_author_id_fkey" FOREIGN KEY ("author_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."challenges"
    ADD CONSTRAINT "challenges_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."users_link_challenges"
    ADD CONSTRAINT "users_link_challenges_challenge_id_fkey" FOREIGN KEY ("challenge_id") REFERENCES "public"."challenges"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."users_link_challenges"
    ADD CONSTRAINT "users_link_challenges_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Enable read access for all users" ON "public"."categories" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."users" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."users_link_challenges" FOR SELECT USING (true);



CREATE POLICY "Enable users to update their own data only" ON "public"."users" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));



ALTER TABLE "public"."categories" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."challenges" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users_link_challenges" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

















































































































































































GRANT ALL ON FUNCTION "public"."add_solved_challenge"("p_user_id" "uuid", "p_challenge_id" bigint, "p_submitted_flag" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."add_solved_challenge"("p_user_id" "uuid", "p_challenge_id" bigint, "p_submitted_flag" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."add_solved_challenge"("p_user_id" "uuid", "p_challenge_id" bigint, "p_submitted_flag" "text") TO "service_role";



GRANT ALL ON FUNCTION "public"."delete_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."delete_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."delete_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."verify_flag"("challenge_id" bigint, "submitted_flag" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."verify_flag"("challenge_id" bigint, "submitted_flag" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."verify_flag"("challenge_id" bigint, "submitted_flag" "text") TO "service_role";


















GRANT ALL ON TABLE "public"."categories" TO "anon";
GRANT ALL ON TABLE "public"."categories" TO "authenticated";
GRANT ALL ON TABLE "public"."categories" TO "service_role";



GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "service_role";



GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."challenges" TO "anon";
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE ON TABLE "public"."challenges" TO "authenticated";
GRANT ALL ON TABLE "public"."challenges" TO "service_role";
GRANT SELECT ON TABLE "public"."challenges" TO PUBLIC;



GRANT UPDATE("description") ON TABLE "public"."challenges" TO "authenticated";
GRANT SELECT("description") ON TABLE "public"."challenges" TO PUBLIC;



GRANT UPDATE("name") ON TABLE "public"."challenges" TO "authenticated";
GRANT SELECT("name") ON TABLE "public"."challenges" TO PUBLIC;



GRANT UPDATE("points") ON TABLE "public"."challenges" TO "authenticated";
GRANT SELECT("points") ON TABLE "public"."challenges" TO PUBLIC;



GRANT ALL ON SEQUENCE "public"."challenges_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."challenges_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."challenges_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."public_challenges" TO "anon";
GRANT ALL ON TABLE "public"."public_challenges" TO "authenticated";
GRANT ALL ON TABLE "public"."public_challenges" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";



GRANT ALL ON TABLE "public"."users_link_challenges" TO "anon";
GRANT ALL ON TABLE "public"."users_link_challenges" TO "authenticated";
GRANT ALL ON TABLE "public"."users_link_challenges" TO "service_role";



GRANT ALL ON TABLE "public"."user_scores" TO "anon";
GRANT ALL ON TABLE "public"."user_scores" TO "authenticated";
GRANT ALL ON TABLE "public"."user_scores" TO "service_role";



GRANT ALL ON SEQUENCE "public"."users_link_challenges_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."users_link_challenges_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."users_link_challenges_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
